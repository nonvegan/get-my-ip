package FrontEnd;

import BackEnd.MyIP;
import java.awt.Color;
import java.awt.Component;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.net.UnknownHostException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

public class mainWindow extends javax.swing.JFrame {

    /**
     * Creates new form mainWindow
     */
    public mainWindow() {
        initComponents();
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        setResizable(false);
        setValues();
        setStyle();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        copyPublicIPButton = new javax.swing.JButton();
        showPublicIPCheckBox = new javax.swing.JCheckBox();
        publicIPLabel = new javax.swing.JLabel();
        localIPField = new javax.swing.JPasswordField();
        localIPLabel = new javax.swing.JLabel();
        copyLocalIPButton = new javax.swing.JButton();
        publicIPField = new javax.swing.JPasswordField();
        retryIcon = new javax.swing.JLabel();
        showLocalIPCheckBox = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Get My IP");
        setAlwaysOnTop(true);
        setIconImages(null);
        setResizable(false);

        copyPublicIPButton.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        copyPublicIPButton.setText("Copy to ClipBoard");
        copyPublicIPButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyPublicIPButtonActionPerformed(evt);
            }
        });

        showPublicIPCheckBox.setText("Show");
        showPublicIPCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showPublicIPCheckBoxActionPerformed(evt);
            }
        });

        publicIPLabel.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        publicIPLabel.setText("Public IP  ");

        localIPField.setEditable(false);
        localIPField.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        localIPField.setEchoChar((char)0);

        localIPLabel.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        localIPLabel.setText("Local IP  ");

        copyLocalIPButton.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        copyLocalIPButton.setText("Copy to ClipBoard");
        copyLocalIPButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyLocalIPButtonActionPerformed(evt);
            }
        });

        publicIPField.setEditable(false);
        publicIPField.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        publicIPField.setEchoChar('•');

        retryIcon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                retryIconMouseClicked(evt);
            }
        });

        showLocalIPCheckBox.setText("Show");
        showLocalIPCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showLocalIPCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(retryIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(copyPublicIPButton)
                    .addComponent(copyLocalIPButton, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(publicIPLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(publicIPField, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(localIPLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(localIPField, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(showLocalIPCheckBox)
                            .addComponent(showPublicIPCheckBox))))
                .addGap(60, 60, 60))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {localIPField, publicIPField});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {copyLocalIPButton, copyPublicIPButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(localIPField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(localIPLabel)
                    .addComponent(showLocalIPCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(copyLocalIPButton)
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(publicIPLabel)
                    .addComponent(publicIPField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(showPublicIPCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addComponent(copyPublicIPButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(retryIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {copyLocalIPButton, copyPublicIPButton});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void showPublicIPCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showPublicIPCheckBoxActionPerformed
        if (showPublicIPCheckBox.isSelected()) {
            publicIPField.setEchoChar((char) 0);
        } else {
            publicIPField.setEchoChar('•');
        }
    }//GEN-LAST:event_showPublicIPCheckBoxActionPerformed

    private void copyPublicIPButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyPublicIPButtonActionPerformed
        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
        StringSelection stringSelection = new StringSelection(String.valueOf(publicIPField.getPassword()));
        clipboard.setContents(stringSelection, null);
    }//GEN-LAST:event_copyPublicIPButtonActionPerformed

    private void copyLocalIPButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyLocalIPButtonActionPerformed
        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
        StringSelection stringSelection = new StringSelection(String.valueOf(localIPField.getPassword()));
        clipboard.setContents(stringSelection, null);
    }//GEN-LAST:event_copyLocalIPButtonActionPerformed

    private void retryIconMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_retryIconMouseClicked
        setValues();
    }//GEN-LAST:event_retryIconMouseClicked

    private void showLocalIPCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showLocalIPCheckBoxActionPerformed
        if (showLocalIPCheckBox.isSelected()) {
            localIPField.setEchoChar((char) 0);
        } else {
            localIPField.setEchoChar('•');
        }
    }//GEN-LAST:event_showLocalIPCheckBoxActionPerformed
    public void setStyle() {
        retryIcon.setIcon(new ImageIcon(getClass().getResource("/Images/retryIcon.png")));
        Color backgroundColor = Color.decode("#3c4245");
        Color foregroundColor1 = Color.decode("#dfcdc3");
        Color foregroundColor2 = Color.decode("#719192");
        getContentPane().setBackground(backgroundColor);
        for (Component component : getContentPane().getComponents()) {
            component.setBackground(backgroundColor);
            if (component.getClass().getName().equals("javax.swing.JPasswordField")) {
                component.setForeground(foregroundColor1);
            } else {
                component.setForeground(foregroundColor2);
            }
        }
    }

    public void setValues() {
        showLocalIPCheckBox.setSelected(false);
        showPublicIPCheckBox.setSelected(false);
        localIPField.setEchoChar('•');
        publicIPField.setEchoChar('•');
        retryIcon.setVisible(false);
        try {
            localIPField.setText(new MyIP().getLocalIP());
        } catch (UnknownHostException ex) {
            Logger.getLogger(mainWindow.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex, "Error", JOptionPane.ERROR_MESSAGE);
            retryIcon.setVisible(true);
        }
        try {
            publicIPField.setText(new MyIP().getPublicIP());
        } catch (Exception ex) {
            Logger.getLogger(mainWindow.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex, "Error", JOptionPane.ERROR_MESSAGE);
            retryIcon.setVisible(true);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton copyLocalIPButton;
    private javax.swing.JButton copyPublicIPButton;
    private javax.swing.JPasswordField localIPField;
    private javax.swing.JLabel localIPLabel;
    private javax.swing.JPasswordField publicIPField;
    private javax.swing.JLabel publicIPLabel;
    private javax.swing.JLabel retryIcon;
    private javax.swing.JCheckBox showLocalIPCheckBox;
    private javax.swing.JCheckBox showPublicIPCheckBox;
    // End of variables declaration//GEN-END:variables
}
